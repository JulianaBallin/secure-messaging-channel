"""
login_cli.py
-------------

Realiza o login de um usu√°rio no servidor CipherTalk via conex√£o TLS,
verificando credenciais e obtendo um token JWT v√°lido.

Fluxo:
1Ô∏è‚É£ Solicita nome de usu√°rio e senha.
2Ô∏è‚É£ Envia ao servidor via TLS.
3Ô∏è‚É£ Recebe e valida o token JWT.
4Ô∏è‚É£ Retorna nome do usu√°rio e token.
"""

import sys
import os
import ssl
import json
import asyncio
from getpass import getpass
from dotenv import load_dotenv

# ----------------------------
# Garantir imports globais
# ----------------------------
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

# ----------------------------
# Vari√°veis de ambiente
# ----------------------------
load_dotenv()
HOST = os.getenv("SERVER_HOST", "127.0.0.1")
PORT = int(os.getenv("SERVER_PORT", "8888"))


# ======================================================
# üîê Fun√ß√£o principal de login
# ======================================================
async def perform_login():
    """Realiza o login via TLS e retorna o token JWT."""
    username = input("üë§ Nome de usu√°rio: ").strip()
    password = getpass("üîë Senha: ").strip()

    if not username or not password:
        print("‚ùå Usu√°rio e senha s√£o obrigat√≥rios.")
        return None, None

    payload = {
        "action": "login",
        "username": username,
        "password": password,
    }

    try:
        # üîí Configurar contexto SSL
        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE

        reader, writer = await asyncio.open_connection(
            HOST, PORT, ssl=ssl_context
        )

        # üì§ Enviar credenciais
        writer.write((json.dumps(payload) + "\n").encode("utf-8"))
        await writer.drain()

        # üì• Ler resposta
        response = await reader.readline()
        if not response:
            print("‚ùå Nenhuma resposta do servidor.")
            writer.close()
            await writer.wait_closed()
            return None, None

        raw = response.decode().strip()
        if raw == "AUTH_FAILED":
            print("‚ùå Usu√°rio ou senha incorretos.")
            writer.close()
            await writer.wait_closed()
            return None, None

        data = json.loads(raw)
        token = data.get("token")
        if not token:
            print("‚ùå Falha ao autenticar: token ausente.")
            writer.close()
            await writer.wait_closed()
            return None, None

        print(f"‚úÖ Login bem-sucedido! Bem-vindo(a), {username}.")
        writer.close()
        await writer.wait_closed()
        return username, token

    except Exception as e:
        print(f"üí• Erro durante o login: {e}")
        return None, None


# ======================================================
# ‚ñ∂Ô∏è Execu√ß√£o direta
# ======================================================
if __name__ == "__main__":
    try:
        asyncio.run(perform_login())
    except KeyboardInterrupt:
        print("\nüëã Login cancelado pelo usu√°rio.")
